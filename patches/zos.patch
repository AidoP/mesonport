diff --git a/mesonbuild/compilers/detect.py b/mesonbuild/compilers/detect.py
index 0bfedd139..38f21238e 100644
--- a/mesonbuild/compilers/detect.py
+++ b/mesonbuild/compilers/detect.py
@@ -213,6 +213,8 @@ def detect_static_linker(env: 'Environment', compiler: Compiler) -> StaticLinker
         except OSError as e:
             popen_exceptions[join_args(linker + [arg])] = e
             continue
+        if "FSUMA930 ar: Unknown option --" in err:
+            return linkers.ZOSArLinker(compiler.for_machine, linker)
         if "xilib: executing 'lib'" in err:
             return linkers.IntelVisualStudioLinker(linker, getattr(compiler, 'machine', None))
         if '/OUT:' in out.upper() or '/OUT:' in err.upper():
@@ -436,6 +438,14 @@ def _detect_c_or_cpp_compiler(env: 'Environment', lang: str, for_machine: Machin
             return cls(
                 compiler, version, for_machine, is_cross, info, target,
                 exe_wrap, linker=linker)
+        if 'z/OS' in out:
+            defines = _get_clang_compiler_defines(compiler)
+            cls = c.ClangCCompiler if lang == 'c' else cpp.ClangCPPCompiler
+            env.coredata.add_lang_args(cls.language, cls, for_machine, env)
+            linker = linkers.ZOSDynamicLinker(compiler, for_machine, cls.LINKER_PREFIX, [])
+            return cls(
+                ccache, compiler, version, for_machine, is_cross, info,
+                exe_wrap, defines=defines, full_version=full_version, linker=linker)
         if 'clang' in out or 'Clang' in out:
             linker = None
 
diff --git a/mesonbuild/linkers/linkers.py b/mesonbuild/linkers/linkers.py
index dbb5e57aa..0d572ccf5 100644
--- a/mesonbuild/linkers/linkers.py
+++ b/mesonbuild/linkers/linkers.py
@@ -400,6 +400,10 @@ class ArLinker(ArLikeLinker, StaticLinker):
             return self.std_args
 
 
+class ZOSArLinker(ArLinker):
+    id = "zar"
+
+
 class AppleArLinker(ArLinker):
 
     # mostly this is used to determine that we need to call ranlib
@@ -758,6 +762,19 @@ class GnuLikeDynamicLinkerMixin(DynamicLinkerBase):
         return self._apply_prefix(args)
 
 
+class ZOSDynamicLinker(DynamicLinker):
+
+    """z/OS ld implementation."""
+
+    id = "ldz"
+
+    def get_output_args(self, outputname: str) -> T.List[str]:
+        return ['-o', outputname]
+
+    def get_search_args(self, dirname: str) -> T.List[str]:
+        return ['-L' + dirname]
+
+
 class AppleDynamicLinker(PosixDynamicLinkerMixin, DynamicLinker):
 
     """Apple's ld implementation."""
